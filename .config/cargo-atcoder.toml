[atcoder]
submit_via_binary = false # submit via binary by default
use_cross = true         # use `cross` instead of `cargo` when generating binaries
binary_column = 80        # maximum column number of generated binary (0 for no wrapping)
update_interval = 1000    # interval time of fetching result (ms)
strip_path = "/usr/local/opt/binutils/bin/strip"      # specify `strip` command path. NOTE: if you use macOS, you have to install GNU strip and specify its path here.

[profile]
# target to use to generate binary
target = "x86_64-unknown-linux-musl"

[profile.release]
lto = true
panic = 'abort'

# dependencies added to new project
[dependencies]
itertools = "0.9.0"
num = "0.2.1"
petgraph = "0.5.0" 
proconio = { version = "=0.3.6", features = ["derive"] }
# competitive = { git = "https://github.com/tanakh/competitive-rs.git" }

[project]
# to create `rust-toolchain` file, uncomment this line.
# rustc_version = "1.15.1"

# source code template
template = """
#[allow(unused_imports)]
use itertools::Itertools;
#[allow(unused_imports)]
use petgraph::{data::FromElements, graph::UnGraph, unionfind::UnionFind};
#[allow(unused_imports)]
use proconio::marker::*;
#[allow(unused_imports)]
use proconio::{fastout, input};
#[allow(unused_imports)]
use std::cmp::{max, min};
#[allow(unused_imports)]
use std::collections::{HashMap, HashSet, VecDeque};

#[fastout]
fn main() {
}

use num::traits::One;
use petgraph::graph::{IndexType, NodeIndex};
use proconio::source::{Readable, Source};
use std::io::BufRead;
use std::marker::PhantomData;
use std::ops::Sub;

#[allow(dead_code)]
struct NodeIndex1<T>(PhantomData<fn() -> T>);

impl<T: IndexType + Readable<Output = T> + One + Sub<Output = T>> Readable for NodeIndex1<T> {
    type Output = NodeIndex<T>;

    fn read<R: BufRead, S: Source<R>>(source: &mut S) -> NodeIndex<T> {
        NodeIndex::from(T::read(source) - T::one())
    }
}

struct SegmentTree<T, U> {
    n: usize,
    dat: Vec<T>,
    op: U,
    e: T,
}

impl<T, U> SegmentTree<T, U>
where
    U: Fn(T, T) -> T,
    T: Copy,
{
    pub fn new(n: usize, op: U, e: T) -> Self {
        let mut m = 1;
        while m < n {
            m *= 2;
        }
        Self {
            n: m,
            dat: vec![e; 2 * m - 1],
            op,
            e,
        }
    }

    pub fn update(&mut self, idx: usize, val: T) {
        let mut idx = idx + self.n - 1;
        self.dat[idx] = val;
        while idx > 0 {
            idx = (idx - 1) / 2;
            self.dat[idx] = (self.op)(self.dat[2 * idx + 1], self.dat[2 * idx + 2]);
        }
    }

    pub fn query(&self, l: usize, r: usize) -> T {
        let mut l = l + self.n - 1;
        let mut r = r + self.n - 1;
        let mut left = self.e;
        let mut right = self.e;
        while l < r {
            if (l & 1) == 0 {
                left = (self.op)(left, self.dat[l]);
            }
            if (r & 1) == 0 {
                right = (self.op)(self.dat[r - 1], right);
            }
            l = l / 2;
            r = (r - 1) / 2;
        }
        (self.op)(left, right)
    }
}
"""
